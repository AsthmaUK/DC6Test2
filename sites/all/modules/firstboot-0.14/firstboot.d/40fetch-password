#!/usr/bin/perl

# (c) 2010 Flexiant Limited
#
# This script sets the initial password and sshkeys based on the metadata. It relies on the
# Extility 1.1 Metadata service being present, but will fall back to using 1.0 format
# metadata if 1.1 format metadata is not present

use strict;
use warnings;
use XML::Simple;

my $test = 0;
my $xmlh;
# we use wget rather than LWP as wget is installed on more systems than Crypt::SSLeay or IO::Socket::SSL
# which LWP::Simple uses to do https.
my $xmlsource = "wget -q -O - https://configs.flexiscale.com/metadata|";

$xmlsource = $ARGV[0] if ($#ARGV >= 0);

# Return the default usersname to be used if nothing is present in XML
sub getuser
{
    # We use the first user in the 'admin' group if there is one. On ubuntu this is
    # the default user. On debian, the admin group does not exist.
    my @admingroup = getgrnam("admin");
    if (!defined($admingroup[3]) ||
	($admingroup[3] !~ /\S/))
    {
	return "root";
    }
    my @users =  split(" ",$admingroup[3]);
    my $user = $users[0];
    return ($user ne "")?$user:"root";
}

# This routine gets the XML and checks it contains a password in the
# appropriate place. This is partly to check it is properly formed XML
# and partly because if no password is present we need to do manual
# stuff. We return the password or the Null string on failure.
sub getxml
{
    my $count=0;
    for(;;sleep(1))
    {
	$count++;
	print STDERR "Waiting for network\n" if (!($count %10));
	
	# if we run out of retries, return null string so password can
	# be set manually.
	return "" if ($count>($test?2:40));

	open(XML, $xmlsource) || next;
	my $xml="";
	while(<XML>)
	{
	    $xml.=$_;
	}
	close(XML);

	if ($xml =~ /\s*</)
	{
	    if ($xml !~ /<xml>/)
	    {
		$xml="<xml>".$xml."</xml>";
	    }

	    # xml sometimes contains namespace entries which just confuse things when
	    # we haven't got XML::Namespace about. This is an awful hack to get rid
	    # of them.
	    $xml =~ s/\s+\S+:\S+="\S*"//g;

	    $xmlh = XMLin($xml, ForceArray => ['key','user'], KeyAttr => ['id'], ForceContent => 1);

	    my $password = $xmlh->{'CONFIG'}->{'meta'}->{'server'}->{'system'}->{'initial_password'}->{'content'};
	    # support legacy password if new format password not set
	    $password = $xmlh->{'CONFIG'}->{'PASSWORD'}->{'content'} unless (defined($password) && ($password ne ""));
 
	    if (defined($password) && ($password ne ""))
	    {
		return $password;
	    }

	    undef ($xmlh);

	}
    }
    # never reached
    return "";
}

sub setpassword
{
    my $un = shift @_;
    my $pw = shift @_;
    print STDERR "Setting password for user $un\n";
    if (!$test)
    {
	system("passwd -u $un");
	system("echo $un:$pw | chpasswd");
    }
}

# Takes default username as parameter
sub writeauthorizedkeys
{
    my $du = shift @_;
    return unless defined $xmlh->{'CONFIG'}->{'meta'}->{'customer'}->{'system'};
    return unless defined $xmlh->{'CONFIG'}->{'meta'}->{'customer'}->{'system'}->{'sshkeys'};
    return unless defined $xmlh->{'CONFIG'}->{'meta'}->{'customer'}->{'system'}->{'sshkeys'}->{'user'};

    my @users = @{$xmlh->{'CONFIG'}->{'meta'}->{'customer'}->{'system'}->{'sshkeys'}->{'user'}};

    foreach my $uhash (sort @users)
    {
	my $authkeys = "";
	my $u = $uhash->{'name'};
	foreach my $kel (@{$uhash->{'key'}})
	{
	    my $k = $kel->{'content'};
	    if (defined($k) && ($k =~ /\S/))
	    {
		$k=~s/^\s*//g;
		$k=~s/\s*$//g;
		$k=~s/^"(.*)"$/$1/;
		$k=~s/\s+/ /g;
		$k=~s/^\s*//g;
		$k=~s/\s*$//g;
		chomp($k);
		# Add trailing \n if missing
		$authkeys .= $k."\n";
	    }
	}

	if ($authkeys ne "")
	{
	    my @pwent = getpwnam(($u ne "")?$u:$du);
	    my $d = $pwent[7];
	    my $uid = $pwent[2];
	    my $gid = $pwent[3];
	    if (defined($d) && ($d ne ""))
	    {
		if (! (-d "$d/.ssh") && !$test)
		{
		    mkdir ("$d/.ssh");

		    chown $uid, $gid, "$d/.ssh";
		    chmod 0700, "$d";
		    chmod 0700, "$d/.ssh";
		}

		if (!$test)
		{
		    open (AK,">>$d/.ssh/authorized_keys");
		    print AK $authkeys;
		    close AK;
		    
		    chown $uid, $gid, "$d/.ssh/authorized_keys";
		    chmod 0600, "$d/.ssh/authorized_keys";
		}
	    }
	    else
	    {
		printf STDERR "No user $u - cannot set ssh keys\n";
	    }
	}
    }
}


my $un=getuser();
my $pw = getxml();

if ($pw eq "")
{
    do
    {
	print STDERR "Network init failed.\nManually set password for user $un\n";
	print STDERR "Password: ";
	chomp($pw = <STDIN>);
	print STDERR "\n";
    } while ($pw eq "");
    setpassword($un, $pw);
    exit(0);
}

# If a username is specified in XML, use that instead.
my $xmlun = $xmlh->{'CONFIG'}->{'meta'}->{'server'}->{'system'}->{'initial_user'}->{'content'};
$un = $xmlun if (defined($xmlun) && ($xmlun ne ""));

setpassword($un, $pw);
writeauthorizedkeys($un);

